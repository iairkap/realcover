"use client";
/*

import React, { useState, useContext } from "react";
import TableCouponesDashboard from "../../components/tableCoupones/tableCoupones copy";
import DashNav from "../../components/Dashboard/dashnav";
import CreateNewCoupon from "./createNewCoupon";
import styles from "./cupones.module.css";
import { GlobalContext } from "./layout";

function Cupones(props) {
  const { coupons, isLoading } = useContext(GlobalContext);
  const [isModalOpen, setModalOpen] = useState(false);
  const { createNewCupon } = useContext(GlobalContext);

  if (isLoading) {
    return <div>Cargando...</div>;
  }

  const handleOpenModal = () => {
    setModalOpen(true);
  };

  const handleCloseModal = () => {
    setModalOpen(false);
  };

  return (
    <div className={styles.generalBody}>
      <DashNav className={styles.navBar} />
      <div className={styles.generalContaier}>
        <div className={styles.firstPart}></div>
        <button onClick={handleOpenModal}>Crear nuevo Cupon</button>
        <CreateNewCoupon isOpen={isModalOpen} onClose={handleCloseModal} />
        <div className={styles.secondPart}></div>
        <TableCouponesDashboard coupons={coupons} />
      </div>
    </div>
  );
}

export default Cupones;
 */

import React, { useState, useContext } from "react";
import Modal from "react-modal";
import axios from "axios";
import TableCouponesDashboard from "../../components/tableCoupones/tableCoupones copy";
import DashNav from "../../components/Dashboard/dashnav";
import styles from "./cupones.module.css";
import { GlobalContext } from "./layout";

function CreateNewCoupon({ isOpen, onClose }) {
  return (
    <Modal
      isOpen={isOpen}
      onRequestClose={onClose}
      contentLabel="Crear nuevo Cupon"
    ></Modal>
  );
}

function Cupones(props) {
  const { coupons, isLoading } = useContext(GlobalContext);
  const [isModalOpen, setModalOpen] = useState(false);
  const { createNewCupon } = useContext(GlobalContext);
  const [formData, setFormData] = useState({
    code: "",
    discountValue: null,
    discountPercent: null,
    description: "",
    useOnce: false,
    expiryDate: null,
    userId: null,
    used: false,
    minPurchaseUnits: null,
    autoGenerated: false,
  });

  const [message, setMessage] = useState("");

  const handleChange = (e) => {
    const { name, value } = e.target;
    if (name === "useOnce" || name === "used" || name === "autoGenerated") {
      setFormData((prev) => ({ ...prev, [name]: e.target.checked }));
    } else {
      setFormData((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    console.log("Submitting form with data:", formData);

    try {
      const response = await axios.post("/api/admin/coupon", formData);

      console.log("Response from server:", response.data);

      if (response.status === 201) {
        console.log("Successfully created coupon:", response.data);
        setFormData({
          // ... (same reset values as before)
        });
        setMessage("Cupón realizado con éxito!");
        setTimeout(() => setMessage(""), 3000);
      } else {
        console.error("Error from server:", response.data.error);
      }
    } catch (err) {
      console.error("Error while creating coupon:", err);
    }
  };

  const handleOpenModal = () => {
    setModalOpen(true);
  };

  const handleCloseModal = () => {
    setModalOpen(false);
  };

  if (isLoading) {
    return <div>Cargando...</div>;
  }

  return (
    <div className={styles.generalBody}>
      <div className={styles.generalContaier}>
        <button onClick={handleOpenModal}>Crear nuevo Cupon</button>
        <CreateNewCoupon isOpen={isModalOpen} onClose={handleCloseModal} />
        <div className={styles.secondPart}></div>
        <TableCouponesDashboard coupons={coupons} />
        <h2>Crear nuevo Cupon</h2>
        <label>
          Código:
          <input
            name="code"
            value={formData.code}
            onChange={handleChange}
            placeholder="Código"
          />
        </label>
        <label>
          Valor de descuento:
          <input
            type="number"
            name="discountValue"
            value={formData.discountValue}
            onChange={handleChange}
            placeholder="Valor de descuento"
          />
        </label>
        <label>
          Porcentaje de descuento:
          <input
            type="number"
            name="discountPercent"
            value={formData.discountPercent}
            onChange={handleChange}
            placeholder="Porcentaje de descuento"
          />
        </label>
        <label>
          Descripción:
          <input
            name="description"
            value={formData.description}
            onChange={handleChange}
            placeholder="Descripción"
            required
          />
        </label>
        <label>
          Fecha de vencimiento:
          <input
            name="expiryDate"
            value={formData.expiryDate}
            onChange={handleChange}
            placeholder="Fecha de vencimiento (yyyy-mm-dd)"
            type="date"
          />
        </label>
        <label>
          ID del usuario:
          <input
            type="number"
            name="userId"
            value={formData.userId}
            onChange={handleChange}
            placeholder="ID del usuario"
          />
        </label>
        <label>
          Usar una vez:
          <input
            type="checkbox"
            name="useOnce"
            checked={formData.useOnce}
            onChange={handleChange}
          />
        </label>
        <label>
          Ya usado:
          <input
            type="checkbox"
            name="used"
            checked={formData.used}
            onChange={handleChange}
          />
        </label>
        <label>
          Auto generado:
          <input
            type="checkbox"
            name="autoGenerated"
            checked={formData.autoGenerated}
            onChange={handleChange}
          />
        </label>
        <label>
          Unidades mínimas de compra:
          <input
            type="number"
            name="minPurchaseUnits"
            value={formData.minPurchaseUnits}
            onChange={handleChange}
          />
        </label>
        {message && <p className="success">{message}</p>}
        <br />
        <br />
        <button onClick={handleSubmit}>Crear</button>{" "}
        <button onClick={() => console.log("Test button clicked!")}>
          Test
        </button>
      </div>
    </div>
  );
}

export default Cupones;
