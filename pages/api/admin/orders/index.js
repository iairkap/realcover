import prisma from "../../../../prisma/client";
import verifyMiddleware from "../../jwt-session/verifyMiddleware";
import { v4 as uuidv4 } from "uuid";

async function handler(req, res, verifyMethod) {
  const { total, status, products, couponCode } = req.body;

  switch (req.method) {
    case "POST":
      try {
        const user = await prisma.user.findUnique({
          where: {
            email: verifyMethod,
          },
        });

        const userId = user.id;
        let discount = 0;

        if (couponCode) {
          const validCoupon = await prisma.coupon.findUnique({
            where: {
              code: couponCode,
            },
          });

          if (
            validCoupon &&
            !validCoupon.used &&
            (!validCoupon.expiryDate || validCoupon.expiryDate > new Date())
          ) {
            discount = validCoupon.discountPercent
              ? (validCoupon.discountPercent / 100) * total
              : validCoupon.discountValue;
          } else {
            res
              .status(400)
              .json({ message: "Coupon code is not valid or expired" });
            return;
          }
        }

        const order = await prisma.order.create({
          data: {
            total: total - discount,
            status: status,
            userId: userId,
            // if you have a field to link orders to coupons, you can add it here
          },
        });

        const orderDetail = products.map((product) => {
          return {
            orderId: order.id,
            productId: product.productId,
            quantity: product.quantity,
            unitPrice: product.unitPrice,
            size: product.size,
          };
        });

        const orderDetails = await prisma.orderDetail.createMany({
          data: orderDetail,
        });

        const totalQuantity = products.reduce(
          (acc, product) => acc + product.quantity,
          0
        );
        let couponMessage = "";

        if (totalQuantity >= 50) {
          const uniqueCouponCode = uuidv4();
          await prisma.coupon.create({
            data: {
              code: uniqueCouponCode,
              discountPercent: 5,
              description: "5% off for your next purchase over 50 units",
              useOnce: true,
              used: false,
              minPurchaseUnits: 50,
              autoGenerated: true,
            },
          });
          couponMessage = `A 5% discount coupon for your next purchase over 50 units has been generated for you. Coupon Code: ${uniqueCouponCode}.`;
        }

        res.status(200).json({
          message: `Order created. ${couponMessage}`,
          couponCode: couponMessage ? uniqueCouponCode : null,
        });
      } catch (error) {
        res
          .status(500)
          .json({ message: "Error creating one order", error: error.message });
      }
      break;

    default:
      res.status(405).end(`Method Not Allowed`);
  }
}

export default verifyMiddleware(handler);
